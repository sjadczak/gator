// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feed-follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH new_follow AS (
    INSERT INTO
        feed_follows (
            id,
            created_at,
            updated_at,
            user_id,
            feed_id
        )
    VALUES
        (
            $1,
            $2,
            $3,
            $4,
            $5
        )
    RETURNING
        id, created_at, updated_at, user_id, feed_id
)
SELECT
    nf.id,
    u.name AS username,
    f.name AS feedname
FROM
    new_follow nf
    INNER JOIN users u ON nf.user_id = u.id
    INNER JOIN feeds f on nf.feed_id = f.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID       uuid.UUID
	Username string
	Feedname string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(&i.ID, &i.Username, &i.Feedname)
	return i, err
}

const getUserFeedFollows = `-- name: GetUserFeedFollows :many
SELECT
    ff.id, ff.created_at, ff.updated_at, ff.user_id, ff.feed_id,
    u.name AS username,
    f.name AS feedname
FROM
    feed_follows ff
    INNER JOIN users u ON ff.user_id = u.id
    INNER JOIN feeds f ON ff.feed_id = f.id
WHERE
    ff.user_id = (
        SELECT users.id
        FROM users
        WHERE users.name = $1
    )
`

type GetUserFeedFollowsRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	Username  string
	Feedname  string
}

func (q *Queries) GetUserFeedFollows(ctx context.Context, name string) ([]GetUserFeedFollowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFeedFollows, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserFeedFollowsRow
	for rows.Next() {
		var i GetUserFeedFollowsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.Username,
			&i.Feedname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
